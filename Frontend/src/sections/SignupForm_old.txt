import React, { useState, useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import signupImage from "../assets/signup-person-image.png";

const SignupForm = () => {
    const location = useLocation();
    const navigate = useNavigate();

    // Form state
    const [formData, setFormData] = useState({
        firstName: "",
        lastName: "",
        email: "",
        password: "",
        confirmPassword: "",
        referralCode: "",
    });

    // Validation states
    const [isPasswordValid, setIsPasswordValid] = useState(false);
    const [isEmailValid, setIsEmailValid] = useState(false);
    const [doPasswordsMatch, setDoPasswordsMatch] = useState(true);
    const [passwordError, setPasswordError] = useState("");
    const [emailError, setEmailError] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const [message, setMessage] = useState("");

    // Password visibility toggle states
    const [showPassword, setShowPassword] = useState(false);
    const [showConfirmPassword, setShowConfirmPassword] = useState(false);

    // Extract referral code from the query string if available
    useEffect(() => {
        const params = new URLSearchParams(location.search);
        const referralCode = params.get("ref");
        if (referralCode) {
            setFormData((prev) => ({ ...prev, referralCode }));
        }
    }, [location]);

    // Handle input changes
    const handleChange = (e) => {
        const { name, value } = e.target;

        if (name === "password") validatePassword(value);
        if (name === "email") validateEmail(value);
        if (name === "confirmPassword") checkPasswordMatch(value);

        setFormData((prev) => ({ ...prev, [name]: value }));
    };

    // Validate password
    const validatePassword = (password) => {
        const strongPasswordRegex =
            /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*(),.?":{}|<>[\]\\;/`~_+=-])[A-Za-z\d!@#$%^&*(),.?":{}|<>[\]\\;/`~_+=-]{8,}$/;
        if (!strongPasswordRegex.test(password)) {
            setIsPasswordValid(false);
            setPasswordError(
                "Password must be at least 8 characters, include an uppercase letter, a number, and a special character."
            );
        } else {
            setIsPasswordValid(true);
            setPasswordError("");
        }

        // Update password match check whenever password changes
        checkPasswordMatch(formData.confirmPassword);
    };

    // Validate email
    const validateEmail = (email) => {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            setIsEmailValid(false);
            setEmailError("Please enter a valid email address.");
        } else {
            setIsEmailValid(true);
            setEmailError("");
        }
    };

    // Check if password and confirm password match
    const checkPasswordMatch = (confirmPassword) => {
        if (formData.password !== confirmPassword) {
            setDoPasswordsMatch(false);
        } else {
            setDoPasswordsMatch(true);
        }
    };

    // Handle form submission
    const handleSubmit = async (e) => {
        e.preventDefault();
        setMessage("");
        setIsLoading(true);

        try {
            const response = await fetch(
                "https://backend-python.playchike.com/auth/signup",
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        name: `${formData.firstName} ${formData.lastName}`,
                        email: formData.email,
                        password: formData.password, // Only send password
                        referral_code: formData.referralCode,
                    }),
                }
            );

            const result = await response.json();

            if (response.ok) {
                setMessage(
                    `Signup successful! Referral code: ${result.referral_code}`
                );
                setFormData({
                    firstName: "",
                    lastName: "",
                    email: "",
                    password: "",
                    confirmPassword: "",
                    referralCode: "",
                });

                navigate("/welcome");
            } else {
                setMessage(
                    result.error || "An error occurred. Please try again."
                );
            }
        } catch (error) {
            console.error("Error:", error);
            setMessage(
                "An error occurred. Please check your network connection."
            );
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="flex flex-col md:flex-row justify-between items-center p-5 max-w-5xl mx-auto shadow-lg rounded-lg bg-white my-8 font-montserrat">
            <div className="w-full md:flex-1 p-5">
                <h1 className="text-3xl md:text-4xl mb-4 text-center">
                    Signup <span className="text-green-600">Now!</span>
                </h1>
                <p className="text-sm text-gray-600 mb-5 text-center md:text-left">
                    Let's get started. Make sure to use your legal name for
                    payout purposes.
                </p>
                <form onSubmit={handleSubmit} className="flex flex-col">
                    <div className="flex flex-col md:flex-row gap-4 mb-4">
                        <input
                            type="text"
                            name="firstName"
                            placeholder="First Name"
                            value={formData.firstName}
                            onChange={handleChange}
                            className="w-full md:flex-1 p-3 text-lg rounded border border-gray-300"
                            required
                        />
                        <input
                            type="text"
                            name="lastName"
                            placeholder="Last Name"
                            value={formData.lastName}
                            onChange={handleChange}
                            className="w-full md:flex-1 p-3 text-lg rounded border border-gray-300"
                            required
                        />
                    </div>
                    <input
                        type="email"
                        name="email"
                        placeholder="Email"
                        value={formData.email}
                        onChange={handleChange}
                        className="mb-2 p-3 text-lg rounded border border-gray-300"
                        required
                    />
                    {emailError && (
                        <p className="text-sm text-red-500 mb-2">
                            {emailError}
                        </p>
                    )}
                    <div className="relative mb-2">
                        <input
                            type={showPassword ? "text" : "password"}
                            name="password"
                            placeholder="Password"
                            value={formData.password}
                            onChange={handleChange}
                            className="p-3 text-lg rounded border border-gray-300 w-full"
                            required
                        />
                        <span
                            onClick={() => setShowPassword(!showPassword)}
                            className="absolute right-3 top-3 cursor-pointer text-gray-500"
                        >
                            {showPassword ? "üôà" : "üëÅÔ∏è"}
                        </span>
                    </div>
                    {passwordError && (
                        <p className="text-sm text-red-500 mb-2">
                            {passwordError}
                        </p>
                    )}
                    <div className="relative mb-4">
                        <input
                            type={showConfirmPassword ? "text" : "password"}
                            name="confirmPassword"
                            placeholder="Confirm Password"
                            value={formData.confirmPassword}
                            onChange={handleChange}
                            className="p-3 text-lg rounded border border-gray-300 w-full"
                            required
                        />
                        <span
                            onClick={() =>
                                setShowConfirmPassword(!showConfirmPassword)
                            }
                            className="absolute right-3 top-3 cursor-pointer text-gray-500"
                        >
                            {showConfirmPassword ? "üôà" : "üëÅÔ∏è"}
                        </span>
                    </div>
                    {!doPasswordsMatch && (
                        <p className="text-sm text-red-500 mb-2">
                            Passwords do not match.
                        </p>
                    )}
                    {formData.referralCode && (
                        <p className="text-sm text-gray-600 mb-4">
                            Referral Code:{" "}
                            <span className="font-bold">
                                {formData.referralCode}
                            </span>
                        </p>
                    )}
                    <button
                        type="submit"
                        className={`p-3 text-lg rounded text-white ${
                            isLoading ||
                            !isPasswordValid ||
                            !isEmailValid ||
                            !doPasswordsMatch
                                ? "bg-gray-400 cursor-not-allowed"
                                : "bg-green-600 hover:bg-green-700"
                        }`}
                        disabled={
                            isLoading ||
                            !isPasswordValid ||
                            !isEmailValid ||
                            !doPasswordsMatch
                        }
                    >
                        {isLoading ? "Loading..." : "Signup"}
                    </button>
                </form>
                {message && (
                    <p
                        className={`mt-4 text-center text-lg ${
                            message.includes("successful")
                                ? "text-green-600"
                                : "text-red-500"
                        }`}
                    >
                        {message}
                    </p>
                )}
                {/* Link to Login Page */}
                <p className="text-center mt-4">
                    Already have an account?{" "}
                    <span
                        onClick={() => navigate("/login")}
                        className="text-green-600 font-bold cursor-pointer hover:underline"
                    >
                        Login
                    </span>
                </p>
            </div>
            <div className="hidden md:flex w-full md:flex-1 justify-center items-center mt-5 md:mt-0">
                <img
                    src={signupImage}
                    alt="Signup visual"
                    className="max-w-full h-auto rounded-lg"
                />
            </div>
        </div>
    );
};

export default SignupForm;
